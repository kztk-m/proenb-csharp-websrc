-----------------
title: 第5回 課題 (2023)
-----------------


--------
基本課題
--------

その1
~~~~~

ラベルを

:: 

    Label


ボタンを

:: 

    (Button)

テキストボックスを

:: 

    [          ]

テキストエリアを

::

    +-------------+
    |             |
    |             |
    +-------------+

というアスキーアートとして図示することにする．

このとき，Eto.Formsを用いて以下のようにコントロールが配置されているウィンドウを作成しなさい．
**ただし，テンプレートから生成されたコードのうち，MainForm.cs のみ変更すること．**

::

     File: [                       ]  (Load) 
     +-------------------------------------+
     |                                     |
     |                                     |
     |                                     |
     |                                     |
     |                                     |
     +-------------------------------------+
     Ready


ただし，以下を満たすこと．

- "File:"，"Ready"の部分は``Label``を用いて実現
- "File:" の右のテキストボックスは``TextBox``を用いて実現
- "(Load)"の部分は``Button``を用いて実現
- 中央のテキストエリアは``TextArea``を用いて実現
- ウィンドウのサイズは十分に大きい（たとえば400x300程）
- TextBoxの部分にはプレースホルダーテキストを設定してもよいし，しなくてもよい
  - ``PlaceholderText``プロパティ（``string``型）を用いると設定できる．


その2
~~~~~

便宜上，上記で"Ready"と書かれている部分を「ステータス行」と呼ぶことにする．


上記のアプリケーションに以下の機能を実装せよ．

- "Load"ボタンが押されたら，テキストボックスに入力されたパスにあるファイルが *もし存在していれば* 開き，
  その内容を中央のテキストエリアに表示する．
  - 読み込みに成功したら，ステータス行に"Load ok"と表示する．
  - ファイルが存在していなければ，その旨をステータス行に表示する．
  - 本課題では，ファイルを開いたり読みこんだりしたときに例外が発生した場合の挙動については規定しない．

  ..
     - もしテキストボックスが空だったば，ステータス行にその旨を表示（たとえば，"Error: empty path"など）．
     - もしファイルが見付からなければ，中央のテキストボックスには何もせず，
       ステータス行にその旨を表示（たとえば"Error: File not found"など）
     - ``PathTooLongException``，``DirectoryNotFoundException``，``NotSupportedException``のいずれかが発生したら，
       ステータス行に"Invalid path"などと表示．
     - ``UnauthorizedAccessException``か``System.Security.SecurityException``が発生したら，ステータス行にその旨を表示（たとえば，"Permission denied"など）    
       - 入力されたパスがファイルでなくディレクトリを指している場合も``UnauthorizedAccessException``が発生する
     - ``IOException``が発生した場合の処理は規定しない

ただし，相対パスを用いて「ドキュメント」内（Windowsの場合．Windows 8以前は「マイ ドキュメント」）やホームディレクトリ内（Mac等の場合）のファイルを開けるようにするために，以下を``MainForm``のコンストラクタに含めるなどせよ（フォームの関心毎ではないので``Main``等で実行すべきだが，3箇所のファイルを修正するのは大変なので）．

.. code:: cs

   // 現在の（作業）ディレクトリを，プラットフォーム毎の「ドキュメント」的なディレクトリに設定する
   // Windowsだと「ドキュメント」，Macだとホームディレクトリ．他の環境は未確認．
   // 
   // より安全には，Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments) が空文字列かどうか
   // を検査してから Environment.CurrentDirectory に代入したほうがよい．
   Environment.CurrentDirectory = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);

上記の設定により，「ドキュメント」フォルダやホームディレクトリ直下のファイルにファイル名のみでアクセスできるようになる（より正確には相対パスの基準が「ドキュメント」フォルダやホームディレクトリになる）．より具体的には：

- Windows 10/11であれば，「ドキュメント」（エクスプローラーの左サイドバーの「クイックアクセス」か「PC」以下から見付かるはず）フォルダ直下に``test.txt``を適当な内容で用意し，作成するアプリケーションのテキストボックスに``test.txt``を入力して"Load"ボタンを押せばその内容が表示されるようになる．

- Macであれば，ホームディレクトリ（Finderの左サイドバーの「よく使う項目」の自分のユーザ名を選択することで開かれるディレクトリ．ターミナルだと``cd``で移動できる箇所）直下に``test.txt``を適当な内容で用意し，作成するアプリケーションのテキストボックスに``test.txt``を入力して"Load"ボタンを押せばその内容が表示されるようになる．


.. hint:: 
   
   テキストボックスに入力されたテキストを取得するには``Text``プロパティを用いる．テキストエリアにテキストを設定するには，
   当該オブジェクトの``Text``を用いる．

   例外処理については `前回 <./w4.html>`__ 参照．

.. hint::

   ファイルが存在するかどうかを確認するには ``File`` クラスの static メソッド ``Exists(string)`` を利用する．
   より具体的には，``File.Exists(path)`` は ``path`` が有効なパスで，指す先にファイルが存在しているときに，``true``を返し，
   そうでないときには``false``を返す．（指す先に存在しているのがディレクトリであるときも``false``となることに注意する．）

.. note::

   なお，``File.Exists(path)`` が ``true`` を返した場合にも，ファイルの読み取りが行えない場合はある．たとえば，
   当該ファイルの read パーミッション がない場合には``UnauthorizedAccessException``が発生する．


--------
発展課題
--------

.. caution:: 
   
   本課題を完了できたのならば本課題の解答のみを提出すればよく，基本課題の解答は提出する必要はない．


上記アプリケーションを拡張し，"Save"ボタンを追加せよ．コントロールの配置は以下のようにせよ．

::

     File: [                ]  (Load) (Save)
     +-------------------------------------+
     |                                     |
     |                                     |
     |                                     |
     |                                     |
     |                                     |
     +-------------------------------------+
     Ready


"Save"ボタンが押されたときには，その時点でのテキストエリアの内容を，
その時点でのテキストボックスに入力されたパスにファイルに保存する機能を実装せよ．
ただし，

- もしファイルが見付からなければそのファイルを作成するようにし，
  ファイルが見付かったならばそのファイルを上書きするようにする．

- 何らかの理由で与えられたパスのファイルを作成したり開いたりできない場合はステータス行にその旨を表示

- 書き込みに成功したら，ステータス行に"Save ok"と表示する

.. hint:: 

   ``File.WriteAllText``を実行し，適当な例外処理をしたので十分．どんな例外が発生しうるかは，
   `当該メソッドのリファレンス <https://docs.microsoft.com/en-us/dotnet/api/system.io.file.writealltext?view=net-6.0#system-io-file-writealltext(system-string-system-string)>`__を参照．

   もっと親切なエラーメッセージをステータス行に表示したい場合は
   ``File.Exists`` や ``Directory.Exists`` や，``File.GetAttributes`` などを利用するとよいかもしれない（参考：`.NET API リファレンスのFlieクラスの説明 <https://docs.microsoft.com/en-us/dotnet/api/system.io.file?view=net-6.0>`__）

   *注意（2022-05-25追記）*：どうやらWindows環境（.NET 5.0.408，6.0.201で確認）では，``ArgumentException``や``PathTooLongException``が上記リファレンスの記述通りには発生しない模様．また，``FileInfo``のコンストラクタも記述通りの例外を投げない模様．たとえば，``fi = new FileInfo("./test???.txt")``は例外を投げず，``fi.CreateText()``などとしたときに``IOException``が発生する．

   
